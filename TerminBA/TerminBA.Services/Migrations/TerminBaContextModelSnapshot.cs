// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TerminBA.Services.Database;

#nullable disable

namespace TerminBA.Services.Migrations
{
    [DbContext(typeof(TerminBaContext))]
    partial class TerminBaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenitySportCenter", b =>
                {
                    b.Property<int>("AvailableAmenitiesId")
                        .HasColumnType("int");

                    b.Property<int>("SportCentarsId")
                        .HasColumnType("int");

                    b.HasKey("AvailableAmenitiesId", "SportCentarsId");

                    b.HasIndex("SportCentarsId");

                    b.ToTable("SportCenterAmenities", (string)null);
                });

            modelBuilder.Entity("FacilitySport", b =>
                {
                    b.Property<int>("AvailableSportsId")
                        .HasColumnType("int");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSportsId", "FacilitiesId");

                    b.HasIndex("FacilitiesId");

                    b.ToTable("FacilitySports", (string)null);
                });

            modelBuilder.Entity("SportSportCenter", b =>
                {
                    b.Property<int>("AvailableSportsId")
                        .HasColumnType("int");

                    b.Property<int>("SportCentarsId")
                        .HasColumnType("int");

                    b.HasKey("AvailableSportsId", "SportCentarsId");

                    b.HasIndex("SportCentarsId");

                    b.ToTable("SportCenterSports", (string)null);
                });

            modelBuilder.Entity("TerminBA.Services.Database.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");
                });

            modelBuilder.Entity("TerminBA.Services.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<int>("SportCenterId")
                        .HasColumnType("int");

                    b.Property<int>("TurfTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SportCenterId");

                    b.HasIndex("TurfTypeId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("TerminBA.Services.Database.FacilityReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityReviewId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RatingDate")
                        .HasColumnType("date");

                    b.Property<int>("RatingNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("FacilityReviewId");

                    b.HasIndex("UserId", "FacilityId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [FacilityId] IS NOT NULL");

                    b.ToTable("FacilityReviews");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SkillLevel");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChosenSportId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChosenSportId");

                    b.HasIndex("ReservationDate");

                    b.HasIndex("UserId");

                    b.HasIndex("FacilityId", "ReservationDate", "StartTime")
                        .IsUnique()
                        .HasFilter("[FacilityId] IS NOT NULL");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("TerminBA.Services.Database.SportCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("InstagramAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEquipmentProvided")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleId");

                    b.ToTable("SportCenters");
                });

            modelBuilder.Entity("TerminBA.Services.Database.TurfType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("TurfTypes");
                });

            modelBuilder.Entity("TerminBA.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstagramAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SportCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email");

                    b.HasIndex("RoleId");

                    b.HasIndex("SportCenterId");

                    b.HasIndex("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TerminBA.Services.Database.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateOnly>("RatingDate")
                        .HasColumnType("date");

                    b.Property<int>("RatingNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewedId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedId");

                    b.HasIndex("ReviewerId", "ReviewedId")
                        .IsUnique()
                        .HasFilter("[ReviewerId] IS NOT NULL AND [ReviewedId] IS NOT NULL");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("TerminBA.Services.Database.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("CloseingHours")
                        .HasColumnType("time");

                    b.Property<int>("EndDay")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("OpeningHours")
                        .HasColumnType("time");

                    b.Property<int>("SportCenterId")
                        .HasColumnType("int");

                    b.Property<int>("StartDay")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ValidFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ValidTo")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SportCenterId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("AmenitySportCenter", b =>
                {
                    b.HasOne("TerminBA.Services.Database.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AvailableAmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.SportCenter", null)
                        .WithMany()
                        .HasForeignKey("SportCentarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacilitySport", b =>
                {
                    b.HasOne("TerminBA.Services.Database.Sport", null)
                        .WithMany()
                        .HasForeignKey("AvailableSportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportSportCenter", b =>
                {
                    b.HasOne("TerminBA.Services.Database.Sport", null)
                        .WithMany()
                        .HasForeignKey("AvailableSportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.SportCenter", null)
                        .WithMany()
                        .HasForeignKey("SportCentarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TerminBA.Services.Database.Facility", b =>
                {
                    b.HasOne("TerminBA.Services.Database.SportCenter", "SportCenter")
                        .WithMany("Facilities")
                        .HasForeignKey("SportCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.TurfType", "TurfType")
                        .WithMany()
                        .HasForeignKey("TurfTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportCenter");

                    b.Navigation("TurfType");
                });

            modelBuilder.Entity("TerminBA.Services.Database.FacilityReview", b =>
                {
                    b.HasOne("TerminBA.Services.Database.Facility", "Facility")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TerminBA.Services.Database.FacilityReview", null)
                        .WithMany("FacilityReviews")
                        .HasForeignKey("FacilityReviewId");

                    b.HasOne("TerminBA.Services.Database.User", "User")
                        .WithMany("FacilityReviewsGiven")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Post", b =>
                {
                    b.HasOne("TerminBA.Services.Database.Reservation", "Reservation")
                        .WithMany("Posts")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Reservation", b =>
                {
                    b.HasOne("TerminBA.Services.Database.Sport", "ChosenSport")
                        .WithMany()
                        .HasForeignKey("ChosenSportId");

                    b.HasOne("TerminBA.Services.Database.Facility", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId");

                    b.HasOne("TerminBA.Services.Database.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");

                    b.Navigation("ChosenSport");

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerminBA.Services.Database.SportCenter", b =>
                {
                    b.HasOne("TerminBA.Services.Database.City", "City")
                        .WithMany("SportCenters")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TerminBA.Services.Database.User", b =>
                {
                    b.HasOne("TerminBA.Services.Database.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TerminBA.Services.Database.SportCenter", "SportCenter")
                        .WithMany()
                        .HasForeignKey("SportCenterId");

                    b.Navigation("City");

                    b.Navigation("Role");

                    b.Navigation("SportCenter");
                });

            modelBuilder.Entity("TerminBA.Services.Database.UserReview", b =>
                {
                    b.HasOne("TerminBA.Services.Database.User", "Reviewed")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("ReviewedId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TerminBA.Services.Database.User", "Reviewer")
                        .WithMany("UserReviewsGiven")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Reviewed");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TerminBA.Services.Database.WorkingHours", b =>
                {
                    b.HasOne("TerminBA.Services.Database.SportCenter", "SportCentar")
                        .WithMany("WorkingHours")
                        .HasForeignKey("SportCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportCentar");
                });

            modelBuilder.Entity("TerminBA.Services.Database.City", b =>
                {
                    b.Navigation("SportCenters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Facility", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("ReviewsReceived");
                });

            modelBuilder.Entity("TerminBA.Services.Database.FacilityReview", b =>
                {
                    b.Navigation("FacilityReviews");
                });

            modelBuilder.Entity("TerminBA.Services.Database.Reservation", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("TerminBA.Services.Database.SportCenter", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("TerminBA.Services.Database.User", b =>
                {
                    b.Navigation("FacilityReviewsGiven");

                    b.Navigation("Reservations");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("UserReviewsGiven");
                });
#pragma warning restore 612, 618
        }
    }
}
